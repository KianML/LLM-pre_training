{"input":"","text":"Below is an instruction that describes a task. Write a response that appropriately completes the request. ### Instruction: Design a neural network model to classify emails into spam and non-spam. ### Input: No input ### Output: import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n\n# Preparing data\nX_train, y_train, X_test, y_test = get_data() # Returns training and testing datasets\n\n# Building model\ninputs = Input(shape=(X_train.shape[1], ))\nx = Dense(64, activation='relu')(inputs)\nx = Dense(32, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\n# Compiling model\nmodel = tf.keras.Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train, epochs=30, batch_size=32)\n\n# Evaluating the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","instruction":"Design a neural network model to classify emails into spam and non-spam.","output":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n\n# Preparing data\nX_train, y_train, X_test, y_test = get_data() # Returns training and testing datasets\n\n# Building model\ninputs = Input(shape=(X_train.shape[1], ))\nx = Dense(64, activation='relu')(inputs)\nx = Dense(32, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\n# Compiling model\nmodel = tf.keras.Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train, epochs=30, batch_size=32)\n\n# Evaluating the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","lang":"python","dataset":"code-instructions-122k-alpaca-style","topics":"nn,ml"}
{"input":"","text":"Below is an instruction that describes a task. Write a response that appropriately completes the request. ### Instruction: Build a program to train a model to recognize handwritten digits using a convolutional neural network. ### Input: No input ### Output: import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\n# Input image dimensions\nimg_rows, img_cols = 28, 28\n# Load image data\n(x_train, y_train), (x_valid, y_valid) = mnist.load_data()\n# Reshape it for Conv2D\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_valid = x_valid.reshape(x_valid.shape[0], img_rows, img_cols, 1)\n# Convert to float32\nx_train = x_train.astype('float32')\nx_valid = x_valid.astype('float32')\n# Normalize data\nx_train \/= 255\nx_valid \/= 255\n\n# Build and compile the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_valid, y_valid))","instruction":"Build a program to train a model to recognize handwritten digits using a convolutional neural network.","output":"import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\n\n# Input image dimensions\nimg_rows, img_cols = 28, 28\n# Load image data\n(x_train, y_train), (x_valid, y_valid) = mnist.load_data()\n# Reshape it for Conv2D\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_valid = x_valid.reshape(x_valid.shape[0], img_rows, img_cols, 1)\n# Convert to float32\nx_train = x_train.astype('float32')\nx_valid = x_valid.astype('float32')\n# Normalize data\nx_train \/= 255\nx_valid \/= 255\n\n# Build and compile the model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_valid, y_valid))","lang":"python","dataset":"code-instructions-122k-alpaca-style","topics":"nn,ml"}
{"input":"Two sets of text strings, one for each category","text":"Below is an instruction that describes a task. Write a response that appropriately completes the request. ### Instruction: Create a Keras model with one input and one output that classifies text strings into two categories. ### Input: Two sets of text strings, one for each category ### Output: # Define the model\nmodel = Sequential()\nmodel.add(Input(shape=(None,))) #Input layer\nmodel.add(Embedding(input_dim=VOCAB_SIZE, output_dim=EMBEDDING_DIM))\nmodel.add(Bidirectional(LSTM(units=128)))\nmodel.add(Dense(units=2, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=['acc']\n)\n\n# Train the model\nmodel.fit(\n    x=data,\n    y=labels,\n    batch_size=64,\n    epochs=30\n)","instruction":"Create a Keras model with one input and one output that classifies text strings into two categories.","output":"# Define the model\nmodel = Sequential()\nmodel.add(Input(shape=(None,))) #Input layer\nmodel.add(Embedding(input_dim=VOCAB_SIZE, output_dim=EMBEDDING_DIM))\nmodel.add(Bidirectional(LSTM(units=128)))\nmodel.add(Dense(units=2, activation=\"softmax\"))\n\n# Compile the model\nmodel.compile(\n    optimizer=\"adam\",\n    loss=\"binary_crossentropy\",\n    metrics=['acc']\n)\n\n# Train the model\nmodel.fit(\n    x=data,\n    y=labels,\n    batch_size=64,\n    epochs=30\n)","lang":"python","dataset":"code-instructions-122k-alpaca-style","topics":"nn,ml"}
{"input":"","text":"Below is an instruction that describes a task. Write a response that appropriately completes the request. ### Instruction: Generate a Tensorflow model for a sentiment analysis task. ### Input: Not applicable ### Output: # Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Input data\ndata = tf.data.Dataset.from_tensor_slices(texts, sentiments)\n\n# Define model\nmodel = keras.Sequential()\nmodel.add(layers.InputLayer(input_shape=X_train.shape[1]))\nmodel.add(layers.Embedding(input_dim=1000, output_dim=32, input_length=60))\nmodel.add(layers.Dropout(rate=0.2))\nmodel.add(layers.LSTM(units=32))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\n# Compile\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\n# Train\nmodel.fit(train_data, train_sentiments, epochs=50, batch_size=64)","instruction":"Generate a Tensorflow model for a sentiment analysis task.","output":"# Imports\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Input data\ndata = tf.data.Dataset.from_tensor_slices(texts, sentiments)\n\n# Define model\nmodel = keras.Sequential()\nmodel.add(layers.InputLayer(input_shape=X_train.shape[1]))\nmodel.add(layers.Embedding(input_dim=1000, output_dim=32, input_length=60))\nmodel.add(layers.Dropout(rate=0.2))\nmodel.add(layers.LSTM(units=32))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\n# Compile\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\n# Train\nmodel.fit(train_data, train_sentiments, epochs=50, batch_size=64)","lang":"python","dataset":"code-instructions-122k-alpaca-style","topics":"nn,ml"}
{"input":"A dataset of 800 images of cats and dogs","text":"Below is an instruction that describes a task. Write a response that appropriately completes the request. ### Instruction: Collate a machine learning model in Python that distinguishes between cats and dogs. ### Input: A dataset of 800 images of cats and dogs ### Output: import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1.\/255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '\/path\/to\/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)","instruction":"Collate a machine learning model in Python that distinguishes between cats and dogs.","output":"import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1.\/255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '\/path\/to\/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)","lang":"python","dataset":"code-instructions-122k-alpaca-style","topics":"nn,ml,comp"}
